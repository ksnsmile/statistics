Data <- read.csv('C:/Users/ksn71/OneDrive/바탕 화면/2.Iris (1).csv')
colnames(Data)
sd(Data$Petal.Width)
sd(Data$Petal.Width)
Data <- read.csv('C:/Users/ksn71/OneDrive/바탕 화면/2.Iris (1).csv')
# 열 이름 보
colnames(Data)
#평균 구하기 각 열의
mean(Data$Sepal.Length)
mean(Data$Sepal.Width)
mean(Data$Petal.Length)
mean(Data$Petal.Width)
#분산 구하기 각 열의
var(Data$Sepal.Length)
var(Data$Sepal.Width)
var(Data$Petal.Length)
var(Data$Petal.Width)
# 표준편차 구하기 각 열
sd(Data$Sepal.Length)
sd(Data$Sepal.Width)
sd(Data$Petal.Length)
sd(Data$Petal.Width)
# 각 변수의 표준화
Data_standardized <- scale(Data)
Data <- read.csv('C:/Users/ksn71/OneDrive/바탕 화면/2.Iris (1).csv', fileEncoding = "UTF-8")
# 각 변수의 표준화
Data_standardized <- scale(Data)
#표준평균
mean(Data$Sepal.Length)
mean(Data$Sepal.Width)
mean(Data$Petal.Length)
mean(Data$Petal.Width)
#표준분산
var(Data$Sepal.Length)
var(Data$Sepal.Width)
var(Data$Petal.Length)
var(Data$Petal.Width)
#표준평균
mean(Data_standardized$Sepal.Length)
mean(Data_standardized$Sepal.Width)
mean(Data_standardized$Petal.Length)
mean(Data_standardized$Petal.Width)
#표준분산
var(Data_standardized$Sepal.Length)
var(Data_standardized$Sepal.Width)
var(Data_standardized$Petal.Length)
var(Data_standardized$Petal.Width)
# 각 변수의 표준화
Data_standardized <- scale(Data)
View(Data_standardized)
View(Data)
# 각 변수의 표준화
Data_standardized <- as.data.frame(scale(Data))
#표준평균
mean(Data_standardized$Sepal.Length)
mean(Data_standardized$Sepal.Width)
mean(Data_standardized$Petal.Length)
mean(Data_standardized$Petal.Width)
#표준분산
var(Data_standardized$Sepal.Length)
var(Data_standardized$Sepal.Width)
var(Data_standardized$Petal.Length)
var(Data_standardized$Petal.Width)
# 피어슨 상관계수 계산
correlation_matrix <- cor(Data_standardized, method = "pearson")
# 결과 출력
correlation_matrix
options(width=100)
longley
str(longley)
pairs(longley, main = "자료?? : longley")
pairs(longley, main = "자료명 : longley")
pairs(longley, main = "자료명 : longley")
Cl <- cor(longley)
Cl
symnum(Cl) # highly correlated
i <- lower.tri(Cl)
cor(cbind(P = Cl[i], S = clS[i], K = clK[i]))
symnum(clS <- cor(longley, method = "spearman"))
cor(cbind(P = Cl[i], S = clS[i], K = clK[i]))
symnum(clK <- cor(longley, method = "kendall"))
cor(cbind(P = Cl[i], S = clS[i], K = clK[i]))
# 패키지 "corrgram"?냐?
library(corrgram)
corrgram(cor(longley), main = "상관계수의 시각화", type="corr",cor.method = "pearson", upper.panel=panel.conf)
# 패키지 "corrgram"?냐?
library(corrgram)
# 패키지 "corrgram"?냐?
install.packages("corrgram")
library(corrgram)
corrgram(cor(longley), main = "상관계수의 시각화", type="corr",cor.method = "pearson", upper.panel=panel.conf)
options(encoding = "UTF-8")
version
source("file:///C:/code_statistics/Report_Does Television.R", encoding = "EUC-KR")
R.version
######################
#모분산의 추정 및 검정
install.packages("TeachingDemos")
library(TeachingDemos)
x <- rnorm(20, mean = 15, sd = 7)
x
sigma.test(x, sigma = 6)
sigma.test(x, sigmasq = 36)
sigma.test(x, sigma = 6, alternative = "greater")
X=c(1:10)
X
y=c(7:20)
y
t.test(x, y )
t.test(x,y, var.equal=TRUE)
##################################
#모분산의 차이에 대한 추정 및 검정
x <- rnorm(25, mean = 15, sd = 9)
y <- rnorm(20, mean = 10, sd = 7)
length(x);  mean(x);  var(x)
length(y);  mean(y);  var(y)
var.test(x, y)          # Do x and y have the same variance?
var.test(x, y, alternative = c("greater"))
#회귀분석
#단순선형회귀분석
# 나이와 최대 심장 박동수와의 관계
# Max = 220 - Age
Age <- c(18,23,25,35,65,54,34,56,72,19,23,42,18,39,37)
Max <- c(202,186,187,180,156,169,174,172,153,199,193,174,198,183,178)
Data = data.frame( Age, Max )
Ma <- lm(Max ~ Age, Data)
Ma
names(Ma)
plot( Age, Max, main = "자료와 회귀직선" )
abline(coef(Ma))
summary(Ma)
anova(Ma)
deviance(Ma)       # 또는
sum( ( Max - predict(Ma))^2)
str(Ma)
str(summary(Ma))
str(anova(Ma))
anova(Ma)$Df
anova(Ma)$Sum
anova(Ma)$Mean
anova(Ma)$F
anova(Ma)$Pr
confint(Ma)        # 또는 confint(Ma, level = 0.95)
fitted.values(Ma)  # 또는 fitted(Ma)
residuals(Ma)
predict(Ma)
predict(Ma, interval="confidence",level = 0.95)
predict(Ma, interval="prediction",level = 0.95)
predict(Ma, data.frame(Age=20))
predict(Ma, data.frame(Age=20), interval="confidence")
predict(Ma, data.frame(Age=20), interval="prediction")
opar <- par(mfrow = c(2,3))
plot(Ma, which=c(1:6), las = 1)
par(opar)
Age <- seq(min(Age), max(Age),0.1)
Pc <- predict(Ma, data.frame(Age), interval="confidence")
Pp <- predict(Ma, data.frame(Age), interval="prediction")
matplot(Age, Pc, main="예측값의 신뢰구간", ylab="Max", type='l', lty=1, col="black")
matlines(Age, Pp, type='l', lty=2,col=c("black", "red", "red"))
# 1. readxl 패키지 설치 (한 번만 실행)
install.packages("readxl")
# 2. 패키지 로드
library(readxl)
# 3. Excel 파일 불러오기
data <- read_excel("adhd.xls.xls")
# 3. Excel 파일 불러오기
data <- read_excel("adhd.xls.xls")
# 3. Excel 파일 불러오기
data <- read_excel("adhd.xls")
setwd("C:/Users/ksn71/OneDrive/바탕 화면/git/statistics/4회_분산분석")
# 3. Excel 파일 불러오기
data <- read_excel("adhd.xls")
# 3. Excel 파일 불러오기
data <- read_excel("1.adhd.xls")
View(data)
View(data)
attach(data)
str(data)
str(data)
boxplot(data$d0, data$d15, data$d30, data$d60,
names = c("Placebo", "0.15 mg/kg", "0.30 mg/kg", "0.60 mg/kg"),
main = "Boxplot of Correct Responses by Dosage",
ylab = "Number of Correct Responses",
xlab = "Dosage Levels")
colnames(data)
boxplot(data$D0, data$D15, data$D30, data$D60,
names = c("Placebo", "0.15 mg/kg", "0.30 mg/kg", "0.60 mg/kg"),
main = "Boxplot of Correct Responses by Dosage",
ylab = "Number of Correct Responses",
xlab = "Dosage Levels")
mean(data$D0)
mean(data$D0)
# 위약 복용 후 결과를 줄기-잎 그림으로 나타내기
stem(data$D0)
#6.4. 분산분석
#6.4.1. 일원분류분산분석
# Data : InsectSprays in Datasets
# Effectiveness of Insect Sprays
attach(InsectSprays)
data(InsectSprays)
str(InsectSprays)
boxplot(count~spray, horizontal = TRUE)
## Not assuming equal variances
oneway.test(count~spray)
#6.4. 분산분석
#6.4.1. 일원분류분산분석
# Data : InsectSprays in Datasets
# Effectiveness of Insect Sprays
attach(InsectSprays)
data(InsectSprays)
str(InsectSprays)
boxplot(count~spray, horizontal = TRUE)
## Not assuming equal variances
oneway.test(count~spray)
## Assuming equal variances
oneway.test(count~spray, var.equal = TRUE)
## which gives the same result as
anova(lm(count~spray))
AovOut = aov(count ~ spray, data=InsectSprays)
summary(AovOut)
# Post Hoc tests : Tukey HSD(Honestly Significant Difference) is default in R
TukeyHSD(AovOut, conf.level = 0.95)
pairwise.t.test(count,spray, data=InsectSprays)
# Test assumptions
# a. Homogeneity of variance
bartlett.test(count ~ spray, data=InsectSprays)
# b. Model checking plots
Opar <- par(mfrow = c(2,3))
plot(AovOut, which=c(1:6))
par(Opar)
# 위약 복용 후 결과를 줄기-잎 그림으로 나타내기
stem(data$D0)
correlation <- cor(data$D0, data$D60)
print(correlation)
data_long <- data.frame(
Subject = rep(1:nrow(data), each = 4),  # 참가자 수 만큼 각 그룹에 대해 4개의 값
Dosage = factor(rep(c("Placebo", "0.15 mg/kg", "0.30 mg/kg", "0.60 mg/kg"), times = nrow(data))),
Correct_Responses = c(data$D0, data$D15, data$D30, data$D60)
)
View(data_long)
oneway.test(Correct_Responses~Dosage)
## Assuming equal variances
oneway.test(Correct_Responses~Dosage, var.equal = TRUE)
## which gives the same result as
anova(lm(Correct_Responses~Dosage))
AovOut = aov(Correct_Responses~Dosage, data=data_long)
summary(AovOut)
oneway.test(Correct_Responses~Dosage)
colnames(data_long)
oneway.test(Correct_Responses ~ Dosage)
data_long <- data.frame(
Subject = rep(1:nrow(data), each = 4),  # 각 참가자마다 4개의 측정값
Dosage = factor(rep(c("Placebo", "0.15 mg/kg", "0.30 mg/kg", "0.60 mg/kg"), times = nrow(data))),
Correct_Responses = c(data$D0, data$D15, data$D30, data$D60)
)
# 반복측정 ANOVA 수행
AovOut = aov(Correct_Responses ~ Dosage + Error(Subject/Dosage), data = data_long)
# 결과 출력
summary(AovOut)
# 반복측정 ANOVA 수행
AovOut = aov(Correct_Responses ~ Dosage, data = data_long)
# 결과 출력
summary(AovOut)
attach(InsectSprays)
data(InsectSprays)
str(InsectSprays)
boxplot(count~spray, horizontal = TRUE)
## Not assuming equal variances
oneway.test(count~spray)
## Assuming equal variances
oneway.test(count~spray, var.equal = TRUE)
## which gives the same result as
anova(lm(count~spray))
AovOut = aov(count ~ spray, data=InsectSprays)
summary(AovOut)
summary(AovOut)
View(InsectSprays)
View(InsectSprays)
