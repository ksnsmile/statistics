Data <- read.csv('C:/Users/ksn71/OneDrive/바탕 화면/2.Iris (1).csv')
colnames(Data)
sd(Data$Petal.Width)
sd(Data$Petal.Width)
Data <- read.csv('C:/Users/ksn71/OneDrive/바탕 화면/2.Iris (1).csv')
# 열 이름 보
colnames(Data)
#평균 구하기 각 열의
mean(Data$Sepal.Length)
mean(Data$Sepal.Width)
mean(Data$Petal.Length)
mean(Data$Petal.Width)
#분산 구하기 각 열의
var(Data$Sepal.Length)
var(Data$Sepal.Width)
var(Data$Petal.Length)
var(Data$Petal.Width)
# 표준편차 구하기 각 열
sd(Data$Sepal.Length)
sd(Data$Sepal.Width)
sd(Data$Petal.Length)
sd(Data$Petal.Width)
# 각 변수의 표준화
Data_standardized <- scale(Data)
Data <- read.csv('C:/Users/ksn71/OneDrive/바탕 화면/2.Iris (1).csv', fileEncoding = "UTF-8")
# 각 변수의 표준화
Data_standardized <- scale(Data)
#표준평균
mean(Data$Sepal.Length)
mean(Data$Sepal.Width)
mean(Data$Petal.Length)
mean(Data$Petal.Width)
#표준분산
var(Data$Sepal.Length)
var(Data$Sepal.Width)
var(Data$Petal.Length)
var(Data$Petal.Width)
#표준평균
mean(Data_standardized$Sepal.Length)
mean(Data_standardized$Sepal.Width)
mean(Data_standardized$Petal.Length)
mean(Data_standardized$Petal.Width)
#표준분산
var(Data_standardized$Sepal.Length)
var(Data_standardized$Sepal.Width)
var(Data_standardized$Petal.Length)
var(Data_standardized$Petal.Width)
# 각 변수의 표준화
Data_standardized <- scale(Data)
View(Data_standardized)
View(Data)
# 각 변수의 표준화
Data_standardized <- as.data.frame(scale(Data))
#표준평균
mean(Data_standardized$Sepal.Length)
mean(Data_standardized$Sepal.Width)
mean(Data_standardized$Petal.Length)
mean(Data_standardized$Petal.Width)
#표준분산
var(Data_standardized$Sepal.Length)
var(Data_standardized$Sepal.Width)
var(Data_standardized$Petal.Length)
var(Data_standardized$Petal.Width)
# 피어슨 상관계수 계산
correlation_matrix <- cor(Data_standardized, method = "pearson")
# 결과 출력
correlation_matrix
options(width=100)
longley
str(longley)
pairs(longley, main = "자료?? : longley")
pairs(longley, main = "자료명 : longley")
pairs(longley, main = "자료명 : longley")
Cl <- cor(longley)
Cl
symnum(Cl) # highly correlated
i <- lower.tri(Cl)
cor(cbind(P = Cl[i], S = clS[i], K = clK[i]))
symnum(clS <- cor(longley, method = "spearman"))
cor(cbind(P = Cl[i], S = clS[i], K = clK[i]))
symnum(clK <- cor(longley, method = "kendall"))
cor(cbind(P = Cl[i], S = clS[i], K = clK[i]))
# 패키지 "corrgram"?냐?
library(corrgram)
corrgram(cor(longley), main = "상관계수의 시각화", type="corr",cor.method = "pearson", upper.panel=panel.conf)
# 패키지 "corrgram"?냐?
library(corrgram)
# 패키지 "corrgram"?냐?
install.packages("corrgram")
library(corrgram)
corrgram(cor(longley), main = "상관계수의 시각화", type="corr",cor.method = "pearson", upper.panel=panel.conf)
options(encoding = "UTF-8")
version
source("file:///C:/code_statistics/Report_Does Television.R", encoding = "EUC-KR")
R.version
######################
#모분산의 추정 및 검정
install.packages("TeachingDemos")
library(TeachingDemos)
x <- rnorm(20, mean = 15, sd = 7)
x
sigma.test(x, sigma = 6)
sigma.test(x, sigmasq = 36)
sigma.test(x, sigma = 6, alternative = "greater")
X=c(1:10)
X
y=c(7:20)
y
t.test(x, y )
t.test(x,y, var.equal=TRUE)
##################################
#모분산의 차이에 대한 추정 및 검정
x <- rnorm(25, mean = 15, sd = 9)
y <- rnorm(20, mean = 10, sd = 7)
length(x);  mean(x);  var(x)
length(y);  mean(y);  var(y)
var.test(x, y)          # Do x and y have the same variance?
var.test(x, y, alternative = c("greater"))
#회귀분석
#단순선형회귀분석
# 나이와 최대 심장 박동수와의 관계
# Max = 220 - Age
Age <- c(18,23,25,35,65,54,34,56,72,19,23,42,18,39,37)
Max <- c(202,186,187,180,156,169,174,172,153,199,193,174,198,183,178)
Data = data.frame( Age, Max )
Ma <- lm(Max ~ Age, Data)
Ma
names(Ma)
plot( Age, Max, main = "자료와 회귀직선" )
abline(coef(Ma))
summary(Ma)
anova(Ma)
deviance(Ma)       # 또는
sum( ( Max - predict(Ma))^2)
str(Ma)
str(summary(Ma))
str(anova(Ma))
anova(Ma)$Df
anova(Ma)$Sum
anova(Ma)$Mean
anova(Ma)$F
anova(Ma)$Pr
confint(Ma)        # 또는 confint(Ma, level = 0.95)
fitted.values(Ma)  # 또는 fitted(Ma)
residuals(Ma)
predict(Ma)
predict(Ma, interval="confidence",level = 0.95)
predict(Ma, interval="prediction",level = 0.95)
predict(Ma, data.frame(Age=20))
predict(Ma, data.frame(Age=20), interval="confidence")
predict(Ma, data.frame(Age=20), interval="prediction")
opar <- par(mfrow = c(2,3))
plot(Ma, which=c(1:6), las = 1)
par(opar)
Age <- seq(min(Age), max(Age),0.1)
Pc <- predict(Ma, data.frame(Age), interval="confidence")
Pp <- predict(Ma, data.frame(Age), interval="prediction")
matplot(Age, Pc, main="예측값의 신뢰구간", ylab="Max", type='l', lty=1, col="black")
matlines(Age, Pp, type='l', lty=2,col=c("black", "red", "red"))
setwd("C:/Users/ksn71/OneDrive/바탕 화면/git/statistics/6회_비모수통계학")
file_path <- "운동과 위약(Placebo) 효과.xls
# 파일 읽기
data <- read_excel(file_path)
# 데이터 확인
head(data)
file_path <- "운동과 위약(Placebo) 효과.xls
# 파일 읽기
data <- read_excel(file_path)
# 데이터 확인
head(data)
file_path <- "운동과 위약(Placebo) 효과.xls"
file_path <- "운동과 위약(Placebo) 효과.xls"
# 파일 읽기
data <- read_excel(file_path)
library(readxl)
# 파일 읽기
data <- read_excel(file_path)
View(data)
View(data)
attach(data)
info_group <- data[cond=="Control"]
info_group <- data[data$cond=="Control"]
# 데이터 확인
head(data)
info_group <- data[data$cond=="Control",]
View(info_group)
View(info_group)
con_group <- data[data$cond=="Control",]
# 데이터 확인
tail(data)
info_group <- data[data$cond=="Informed",]
con_group <- data[data$cond=="Control",]
info_mean <- mean(info_group, na.rm = TRUE)
info_sd <- sd(info_group, na.rm = TRUE)
control_mean <- mean(con_group, na.rm = TRUE)
control_sd <- sd(con_group, na.rm = TRUE)
info_mean <- mean(info_group$age, na.rm = TRUE)
info_sd <- sd(info_group$age, na.rm = TRUE)
info_mean
info_sd
control_mean <- mean(con_group$age, na.rm = TRUE)
control_sd <- sd(con_group$age, na.rm = TRUE)
control_mean
control_sd
# 파일 읽기
data <- read_excel(file_path)
t_test <- t.test(info_group, con_group, alternative = "two.sided", var.equal = TRUE)
t_test <- t.test(info_group$age, con_group$age, alternative = "two.sided", var.equal = TRUE)
t_test
# 빈도 계산
ex1_freq <- table(data$ex1)
ex2_freq <- table(data$ex2)
barplot(ex1_freq, main = "Exercise Frequency at Time1 (ex1)", col = "blue", xlab = "Exercise Level", ylab = "Frequency")
barplot(ex2_freq, main = "Exercise Frequency at Time2 (ex2)", col = "green", xlab = "Exercise Level", ylab = "Frequency")
# 막대그래프 생성
barplot(ex1_freq, main = "Exercise Frequency at Time1 (ex1)", col = "blue", xlab = "Exercise Level", ylab = "Frequency")
percentage_zero_ex1 <- sum(data$ex1 == 0) / nrow(data) * 100
# 결과 출력
print(percentage_zero_ex1)
percentage_zero_ex2 <- sum(data$ex2 == 0) / nrow(data) * 100
# 결과 출력
print(percentage_zero_ex2)
t_test_result <- t.test(info_group$ex2, con_group$ex2)
t_test_result
wilcox_test_result <- wilcox.test(info_group$ex2, con_group$ex2)
wilcox_test_result <- wilcox.test(info_group$ex2, con_group$ex2, exact = FALSE)
# 결과 출력
print(wilcox_test_result)
# 정보집단과 대조군의 wt1 비교 t-검정
t_test_wt1 <- t.test(info_group$wt1, con_group$wt1)
# 결과 출력
print(t_test_wt1)
# 정보집단과 대조군의 wt2 비교 t-검정
t_test_wt2 <- t.test(info_group$wt2, con_group$wt2)
# 결과 출력
print(t_test_wt2)
# 각 그룹의 평균 체중 감소 계산
mean_info_group_wt_change <- mean(info_group$awt)
mean_con_group_wt_change <- mean(con_group$awt)
# 결과 출력
cat("정보집단의 평균 체중 감소: ", mean_info_group_wt_change, "\n")
cat("대조군의 평균 체중 감소: ", mean_con_group_wt_change, "\n")
# 더 큰 체중 감소를 보인 그룹 확인
if (mean_info_group_wt_change > mean_con_group_wt_change) {
cat("정보집단이 더 큰 체중 감소를 보였습니다.")
} else if (mean_info_group_wt_change < mean_con_group_wt_change) {
cat("대조군이 더 큰 체중 감소를 보였습니다.")
} else {
cat("두 그룹의 체중 감소는 동일합니다.")
}
mean_info_group_wt_change
mean_con_group_wt_change
